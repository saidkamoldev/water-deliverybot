from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, ContentType, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.utils.markdown import quote_html
from loguru import logger

from loader import dp, _, bot
from states.reg_state import RegData
from utils.db_api import db_commands
from functions.get_data_func import get_data
from utils.misc.profanityFilter import censored_message
from aiogram.types import Contact
import re

from keyboards.default.params_default import chose_offer, back_keyboard

from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.callback_data import CallbackData
from keyboards.default.offers_default import chose_offer, chose_type, select_keyboard, payments_type, address_send_offer, chose_kuler
from states.states import Order, Kuller
from django_project.telegrambot.usersmanage.models import Offer
from keyboards.inline.main_menu_inline import main_keyboard
# from keyboards.inline.admin_inline import offer_confirm_keyboard
import datetime
import asyncio
import json

home_img = "AgACAgIAAxkBAAIHNmUf4UFhnZm25H8XV8IVOoRbaEzgAAJuzzEbDAwAAUkd4gs5XoEPDQEAAwIAA3kAAzAE"

chat_id = -4079630827


water_quantity = {}
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
SELECT_WATER, SELECT_QUANTITY = range(2)

@dp.message_handler(text=["üõç –ó–∞–∫–∞–∑–∞—Ç—å","üõç Yektazib berish"])
async def order(message: types.Message):
    await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ ‚§µÔ∏è"), reply_markup=await chose_offer())


@dp.message_handler(text=["üö∞ –ö—É–ª–ª–µ—Ä—ã TozaSuv", "üö∞ Kulerlar TozaSuv"])
async def order(message: types.Message):
    await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ ‚§µÔ∏è"), reply_markup=await chose_kuler())
    await Kuller.ChoseKuller.set()

@dp.message_handler(state=Kuller.ChoseKuller)
async def order(message: types.Message,state: FSMContext):
    product = message.text
    await message.answer((f"{product} suv bu"), reply_markup=await back_keyboard())
    await message.answer_location()
    await state.finish()

@dp.message_handler(text=["üóú –ü–æ–º–ø—ã –¥–ª—è –≤–æ–¥—ã", "üóú Suv uchun pompa"])
async def order(message: types.Message):
    await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ ‚§µÔ∏è"), reply_markup=await chose_kuler())
    await Kuller.ChosePompa.set()

@dp.message_handler(state=Kuller.ChosePompa)
async def order(message: types.Message,state: FSMContext):
    product = message.text
    await message.answer((f"{product} Pompa bu"), reply_markup=await back_keyboard())
    await state.finish()


@dp.message_handler(text=["üí¶ –í–æ–¥–∞ TozaSuv", "üí¶ Toza TozaSuv"])
async def order_water(message: types.Message):

    await message.answer_photo(photo=home_img,  caption=_(
    "<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –û—á–∏—Å—Ç–∫–∞: üåü</b> TozaSuv - —ç—Ç–æ 9 —Å—Ç–µ–ø–µ–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏, —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è –∫–∞–ø–ª—è –≤–æ–¥—ã –±—ã–ª–∞ —á–∏—Å—Ç–æ–π –∏ —Å–≤–µ–∂–µ–π, –∫–∞–∫ —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–æ—Å–∞.\n\n"
    "<b>–û–∑–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ó–¥–æ—Ä–æ–≤—å—è: üíß</b> –ú—ã –æ–±–æ–≥–∞—Ç–∏–ª–∏ TozaSuv –æ–∑–æ–Ω–æ–º, —á—Ç–æ–±—ã –≤–∞—à–∞ –≤–æ–¥–∞ –±—ã–ª–∞ –Ω–µ —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç–æ–π, –Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ–π. –≠—Ç–æ –≤–∞—à –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—è –≤ –∫–∞–∂–¥–æ–π –±—É—Ç—ã–ª–∫–µ.\n\n"
    "<b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –î–æ—Å—Ç–∞–≤–∫–∞: üöö</b> –ò —Å–∞–º–æ–µ –ª—É—á—à–µ–µ - –º—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º TozaSuv –ø—Ä—è–º–æ –∫ –≤–∞–º! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —á–∏—Å—Ç–æ–π –≤–æ–¥–æ–π, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞—è –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É."
    "<b>–ë–µ–∑ –£—Å–∏–ª–∏–π: üåÜ</b> –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —ç—Ç–∞–∂–∞, TozaSuv –ª–µ–≥–∫–æ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –∫ –≤–∞–º. –ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ –≤–∞—à–µ–º –∫–æ–º—Ñ–æ—Ä—Ç–µ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç–µ –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–π –≤–æ–¥–µ.\n\n"
    "<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚è¨</b>"
    ), reply_markup=await chose_type())
    await Order.CategoryChoice.set()

caption = ""
photo = ""
@dp.message_handler(state=Order.CategoryChoice)
async def order_category(message: types.Message, state: FSMContext):
    product = message.text
    offer = Offer()
    offer.product = product

    global caption
    global photo
    if product == _("üí¶ Toza Suv 5–ª"):
        caption = _("<b>üí¶ Toza Suv 5–ª</b>\n\n"
        "<b>–¶–µ–Ω–∞:</b> 10.000 —Å—É–º \n\n"
        "üåü Toza Suv - –≤–æ–¥–∞ –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç–µ! –ù–∞—Å–ª–∞–¥–∏—Ç–µ—Å—å –∫–∞–∂–¥–æ–π –∫–∞–ø–ª–µ–π —Å–≤–µ–∂–µ—Å—Ç–∏ –∏ —á–∏—Å—Ç–æ—Ç—ã.\n\n"
        "üíß –ù–∞—à–∞ –≤–æ–¥–∞ –ø—Ä–æ—à–ª–∞ 9 —Å—Ç–µ–ø–µ–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏, —á—Ç–æ–±—ã –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ —á–∏—Å—Ç–æ–π. –≠—Ç–æ –∑–¥–æ—Ä–æ–≤–æ, –≤–µ—Ä–Ω–æ?\n\n"
        "üöö –ò –≤—ã –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –ª—É—á—à–µ–µ? –ú—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç–∞–≤–∏–º TozaSuv –ø—Ä—è–º–æ –∫ –≤–∞–º, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –±–µ–∑ –∑–∞–±–æ—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–µ.\n\n"
        "üåÜ –ê –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ —ç—Ç–∞–∂–µ–π, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —ç—Ç–∞–∂–∞, TozaSuv –ª–µ–≥–∫–æ –¥–æ–π–¥–µ—Ç –¥–æ –≤–∞—Å. –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –∏ —É–¥–æ–±–Ω–æ!\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ Toza Suv –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É! üí¶")
        photo = "AgACAgIAAxkBAAIHUGUf6MWiRXQo3Wp38eeUDvgZuP4UAAKXzzEbDAwAAUne6klEjbT_CwEAAwIAA20AAzAE"
    elif product == _("üí¶ Toza Suv 10–ª"):
        caption = _("<b>üí¶ Toza Suv 10–ª</b>\n\n"
        "<b>–¶–µ–Ω–∞:</b> 15.000 —Å—É–º \n\n"
        "üåü Toza Suv - –≤–æ–¥–∞ –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç–µ! –ù–∞—Å–ª–∞–¥–∏—Ç–µ—Å—å –∫–∞–∂–¥–æ–π –∫–∞–ø–ª–µ–π —Å–≤–µ–∂–µ—Å—Ç–∏ –∏ —á–∏—Å—Ç–æ—Ç—ã.\n\n"
        "üíß –ù–∞—à–∞ –≤–æ–¥–∞ –ø—Ä–æ—à–ª–∞ 9 —Å—Ç–µ–ø–µ–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏, —á—Ç–æ–±—ã –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ —á–∏—Å—Ç–æ–π. –≠—Ç–æ –∑–¥–æ—Ä–æ–≤–æ, –≤–µ—Ä–Ω–æ?\n\n"
        "üöö –ò –≤—ã –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –ª—É—á—à–µ–µ? –ú—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç–∞–≤–∏–º TozaSuv –ø—Ä—è–º–æ –∫ –≤–∞–º, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –±–µ–∑ –∑–∞–±–æ—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–µ.\n\n"
        "üåÜ –ê –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ —ç—Ç–∞–∂–µ–π, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —ç—Ç–∞–∂–∞, TozaSuv –ª–µ–≥–∫–æ –¥–æ–π–¥–µ—Ç –¥–æ –≤–∞—Å. –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –∏ —É–¥–æ–±–Ω–æ!\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ Toza Suv –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É! üí¶")
        photo = "AgACAgIAAxkBAAIHgWUf67Z-czAzMwPCSTIX_db-MRnrAAKmzzEbDAwAAUnb3mJoYQp06gEAAwIAA3gAAzAE"
    elif product == _("üí¶ Toza Suv 18.5–ª"):
        caption = _("<b>üí¶ Toza Suv 18.5–ª</b>\n\n"
        "<b>–¶–µ–Ω–∞:</b> 20.000 —Å—É–º \n\n"
        "üåü Toza Suv - –≤–æ–¥–∞ –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç–µ! –ù–∞—Å–ª–∞–¥–∏—Ç–µ—Å—å –∫–∞–∂–¥–æ–π –∫–∞–ø–ª–µ–π —Å–≤–µ–∂–µ—Å—Ç–∏ –∏ —á–∏—Å—Ç–æ—Ç—ã.\n\n"
        "üíß –ù–∞—à–∞ –≤–æ–¥–∞ –ø—Ä–æ—à–ª–∞ 9 —Å—Ç–µ–ø–µ–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏, —á—Ç–æ–±—ã –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ —á–∏—Å—Ç–æ–π. –≠—Ç–æ –∑–¥–æ—Ä–æ–≤–æ, –≤–µ—Ä–Ω–æ?\n\n"
        "üöö –ò –≤—ã –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –ª—É—á—à–µ–µ? –ú—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç–∞–≤–∏–º TozaSuv –ø—Ä—è–º–æ –∫ –≤–∞–º, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –±–µ–∑ –∑–∞–±–æ—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–µ.\n\n"
        "üåÜ –ê –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ —ç—Ç–∞–∂–µ–π, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —ç—Ç–∞–∂–∞, TozaSuv –ª–µ–≥–∫–æ –¥–æ–π–¥–µ—Ç –¥–æ –≤–∞—Å. –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –∏ —É–¥–æ–±–Ω–æ!\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ Toza Suv –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É! üí¶")
        photo = "AgACAgIAAxkBAAIHhWUf6-HW01vRc2YjEZUAAb2hnB9_0QACqM8xGwwMAAFJdac72UJJgkkBAAMCAAN4AAMwBA"
    elif product == _("üí¶ Toza Suv 19–ª"):
        caption = _("<b>üí¶ Toza Suv 19–ª</b>\n\n"
        "<b>–¶–µ–Ω–∞:</b> 25.000 —Å—É–º \n\n"
        "üåü Toza Suv - –≤–æ–¥–∞ –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç–µ! –ù–∞—Å–ª–∞–¥–∏—Ç–µ—Å—å –∫–∞–∂–¥–æ–π –∫–∞–ø–ª–µ–π —Å–≤–µ–∂–µ—Å—Ç–∏ –∏ —á–∏—Å—Ç–æ—Ç—ã.\n\n"
        "üíß –ù–∞—à–∞ –≤–æ–¥–∞ –ø—Ä–æ—à–ª–∞ 9 —Å—Ç–µ–ø–µ–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏, —á—Ç–æ–±—ã –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ —á–∏—Å—Ç–æ–π. –≠—Ç–æ –∑–¥–æ—Ä–æ–≤–æ, –≤–µ—Ä–Ω–æ?\n\n"
        "üöö –ò –≤—ã –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –ª—É—á—à–µ–µ? –ú—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç–∞–≤–∏–º TozaSuv –ø—Ä—è–º–æ –∫ –≤–∞–º, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –±–µ–∑ –∑–∞–±–æ—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–µ.\n\n"
        "üåÜ –ê –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ —ç—Ç–∞–∂–µ–π, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —ç—Ç–∞–∂–∞, TozaSuv –ª–µ–≥–∫–æ –¥–æ–π–¥–µ—Ç –¥–æ –≤–∞—Å. –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –∏ —É–¥–æ–±–Ω–æ!\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ Toza Suv –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É! üí¶")
        photo = "AgACAgIAAxkBAAIHiWUf7ATjTatlAAGyupVF5m3Dx9YWKQACq88xGwwMAAFJxso1ey1PousBAAMCAAN4AAMwBA"
    user_id = message.from_user.id
    water_quantity[user_id] = 0

    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton("-", callback_data='decrease'),
        types.InlineKeyboardButton("0", callback_data='quantity'),
        types.InlineKeyboardButton("+", callback_data='increase'),
    ]
    keyboard.row(*buttons)
    keyboard.add(types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –≤–æ–¥—É", callback_data='select_water'))
    await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–∫–∞–∑–∞—Ç—å "), reply_markup=await back_keyboard())
    await message.reply_photo(photo=photo, caption=caption, reply_markup=keyboard)
    await Order.ChoiseQuality.set()
    await state.update_data(offer=offer)


@dp.callback_query_handler(lambda c: c.data in ['decrease', 'quantity', 'increase'], state=Order.ChoiseQuality)
async def handle_quantity_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    data = callback_query.data

    if data == 'decrease':
        water_quantity[user_id] -= 1
    elif data == 'increase':
        water_quantity[user_id] += 1

    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton("-", callback_data='decrease'),
        types.InlineKeyboardButton(str(water_quantity[user_id]), callback_data='quantity'),
        types.InlineKeyboardButton("+", callback_data='increase'),
    ]
    keyboard.row(*buttons)
    keyboard.add(types.InlineKeyboardButton(_("–í—ã–±—Ä–∞—Ç—å –≤–æ–¥—É"), callback_data='select_water'))

    await callback_query.message.edit_caption(caption, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'select_water', state=Order.ChoiseQuality)
async def handle_select_water_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    water_selected = water_quantity[user_id]   
    data = await state.get_data()
    offer: Offer = data.get("offer")
    offer.quantity = water_selected
    currency = 10000 * water_selected
    offer.price = currency

    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–æ–¥—ã
    await callback_query.message.edit_caption(_("–í—ã–±—Ä–∞–Ω–æ {water_selected} —à—Ç—É–∫ –≤–æ–¥—ã <b> {offer_product} </b>".format(water_selected=water_selected, offer_product=offer.product)))
    await callback_query.message.answer(_("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥–µ–æ-–ª–æ–∫–∞—Ü–∏—é,–ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —à–∞–≥"), reply_markup=await address_send_offer())
    await Order.LocationChoise.set()
    await state.update_data(offer=offer)

@dp.message_handler(content_types=[ContentType.LOCATION, ContentType.TEXT],state=Order.LocationChoise)
async def location_send(message: types.Message, state: FSMContext):

    if message.content_type == ContentType.LOCATION:
        location = message.location
        data = await state.get_data()
        offer: Offer = data.get("offer")
        offer.location = location 
    elif message.content_type == ContentType.TEXT:
        location = message.text
        data = await state.get_data()
        offer: Offer = data.get("offer")
        offer.location = location 
    await message.answer(_(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:"), reply_markup=await payments_type())
    await Order.ChoisePayments.set()
    await state.update_data(offer=offer)

PAYMENTS_TOKEN = '398062629:TEST:999999999_F91D8F69C042267444B74CC0B3C747757EB0E065'

@dp.message_handler(state=Order.ChoisePayments, text="üí≥ Click UP")
async def location_send(message: types.Message, state: FSMContext):
    data = await state.get_data()
    offer: Offer = data.get("offer")
    price = offer.price
    offer.payment = "üí≥ Click UP"
    PRICE = types.LabeledPrice(label=f"–í–æ–¥–∞ {offer.product}, {offer.quantity} —à—Ç—É–∫", amount=price*100)

    if PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(message.chat.id, _("–û–ø–ª–∞—Ç–∏—Ç–µ –ø–ª–∞—Ç–µ–∂,–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∑–∞–∫–∞–∑–∞!"), reply_markup=await back_keyboard())

    await bot.send_invoice(message.chat.id,
    title="TozaSuv / ClickUP",
    description=f"–í–æ–¥–∞ {offer.product}, {offer.quantity} —à—Ç—É–∫",
    provider_token=PAYMENTS_TOKEN,
    currency="uzs",
    photo_url="https://www.tozasuv.uz/img/tiles-item-3.jpg",
    is_flexible=False,
    prices=[PRICE],
    start_parameter="one-month-subscription",
    payload="test-invoce-payload")
    await Order.Invoise.set()
    await state.update_data(offer=offer)


@dp.pre_checkout_query_handler(lambda query: True, state=Order.Invoise)
async def pre_checkout(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)
    await Order.Successful.set()

# Succesful payment

@dp.message_handler(state=Order.Successful, content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    offer: Offer = data.get("offer")
    offer.status = "–û–ø–ª–∞—á–µ–Ω"
    payment_info = message.successful_payment.to_python()
    await bot.send_message(message.chat.id, _("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ üí∏, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–∫–∞–∑—É –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥"), reply_markup=await select_keyboard())
    
    await Order.Commentary.set()


@dp.message_handler(state=Order.ChoisePayments)
async def location_send(message: types.Message, state: FSMContext):
    payments_type = message.text
    data = await state.get_data()
    offer: Offer = data.get("offer")
    offer.payment = payments_type 
    await message.answer(_(f"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–∫–∞–∑—É –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥"), reply_markup=await select_keyboard())
    await Order.Commentary.set()
    await state.update_data(offer=offer)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
button_states = {}

@dp.callback_query_handler(lambda c: c.data in ['confirm_order', 'waiting_order', 'cancel_order'])
async def handle_button_click(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    button_data = callback_query.data

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    button_states[user_id] = button_data

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫
    markup = await offer_confirm_keyboard(user_id)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id,
                                        message_id=callback_query.message.message_id,
                                        reply_markup=markup)

async def offer_confirm_keyboard(user_id) -> InlineKeyboardMarkup:
    markup = InlineKeyboardMarkup(row_width=3)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–∞–ª–æ—á–∫—É —Ç–æ–ª—å–∫–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π
    confirm_text = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
    wait_text = "–û–∂–∏–¥–∞–Ω–∏–µ"
    cancel_text = "–û—Ç–º–µ–Ω–∏—Ç—å"
    
    if button_states.get(user_id) == "confirm_order":
        confirm_text += " ‚úÖ"
    elif button_states.get(user_id) == "waiting_order":
        wait_text += " ‚úÖ"
    elif button_states.get(user_id) == "cancel_order":
        cancel_text += " ‚ùå"

    btn1 = InlineKeyboardButton(text=confirm_text, callback_data="confirm_order")
    btn2 = InlineKeyboardButton(text=wait_text, callback_data="waiting_order")
    btn3 = InlineKeyboardButton(text=cancel_text, callback_data="cancel_order")

    markup.add(btn1, btn2, btn3)
    return markup


@dp.message_handler(state=Order.Commentary)
async def location_send(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    current_datetime = datetime.datetime.now()    
    commentary = message.text
    data = await state.get_data()
    offer: Offer = data.get("offer")
    offer.commentary = commentary 
    offer.username = message.from_user.username
    offer.telegram_id = message.from_user.id
    offer.date = current_datetime

    user_data = await get_data(message.from_user.id)
    user_phone = user_data[1]
    # await bot.send_message(chat_id, "TEST", reply_markup=await offer_confirm_keyboard(user_id))

    if offer.location == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è":
        user_location = user_data[2]
        location_data_json_str = user_location[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
        parsed_location = json.loads(location_data_json_str)
        latitude = parsed_location["latitude"]
        longitude = parsed_location["longitude"]
    else:
        user_location = offer.location
        location_data_json_str = user_location[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
        parsed_location = json.loads(location_data_json_str)
        latitude = parsed_location["latitude"]
        longitude = parsed_location["longitude"]
    try:
        await bot.send_location(chat_id, latitude=latitude, longitude=longitude)

        await bot.send_message(chat_id, "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑! üí∏\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_phone} \n"
        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {offer.date} \n"
        f"–ü—Ä–æ–¥—É–∫—Ç: {offer.product} \n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {offer.quantity} \n"
        f"–¶–µ–Ω–∞: {offer.price} \n"
        f"–¢–∏–ø–∞ –æ–ø–ª–∞—Ç—ã: {offer.payment}\n"
        f"–ù–∏–∫–Ω–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º: @{offer.username} \n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {offer.commentary} \n", reply_markup=await offer_confirm_keyboard(user_id)
        )
        offer.save()
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
    else:
        await message.answer(_("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è–ª–∏, –æ–∂–∏–¥–∞–π—Ç–µ"), reply_markup=await main_keyboard())

    finally:
        await state.reset_state()



